#!/bin/bash

# Carregar configurações do arquivo JSON
CONFIG_FILE="config.json"
SUCCESS_COLOR="\e[32m"
FAILURE_COLOR="\e[31m"
RESET_COLOR="\e[0m"

if [[ -f $CONFIG_FILE ]]; then
    SUCCESS_COLOR=$(jq -r '.success_color' $CONFIG_FILE)
    FAILURE_COLOR=$(jq -r '.failure_color' $CONFIG_FILE)
fi

# Função para imprimir mensagem com cores
print_colored() {
    local color=$1
    shift
    echo -e "${color}$@${RESET_COLOR}"
}

# Função para comparar saídas
compare_outputs() {
    local test_num=$1
    local output_file=$2
    local expected_file=$3

    if diff -q "$output_file" "$expected_file" > /dev/null; then
        print_colored "$SUCCESS_COLOR" "Teste $test_num: Sucesso"
        return 0
    else
        print_colored "$FAILURE_COLOR" "Teste $test_num: Falha"
        echo "Diferenças:"
        diff "$output_file" "$expected_file"
        return 1
    fi
}

# Função para rodar testes
run_tests() {
    local input_folder=$1
    local code_file=$2
    local language=$3
    local test_num=0
    local pass_count=0
    local fail_count=0

    for input_file in "$input_folder"/*.in; do
        ((test_num++))
        output_file="output_$test_num.txt"
        expected_file="$input_folder/$test_num.out"

        if [ "$language" == "python" ]; then
            python3 "$code_file" < "$input_file" > "$output_file"
        elif [ "$language" == "c" ]; then
            gcc "$code_file" -o temp.out
            ./temp.out < "$input_file" > "$output_file"
            rm temp.out
        elif [ "$language" == "cpp" ]; then
            g++ "$code_file" -o temp.out
            ./temp.out < "$input_file" > "$output_file"
            rm temp.out
        fi

        compare_outputs "$test_num" "$output_file" "$expected_file"

        if [ $? -eq 0 ]; then
            ((pass_count++))
        else
            ((fail_count++))
        fi
        rm "$output_file"
    done

    echo "Resultados finais: $pass_count sucesso(s), $fail_count falha(s)"
    echo "$pass_count,$fail_count" >> results.csv
}

# Análise de argumentos
while [[ "$#" -gt 0 ]]; do
    case $1 in
        -i|--input) input_file="$2"; shift ;;
        -t|--tests) tests_folder="$2"; shift ;;
        *) echo "Argumento desconhecido: $1"; exit 1 ;;
    esac
    shift
done

# Identificar a linguagem do código
case "${input_file##*.}" in
    py) language="python" ;;
    c) language="c" ;;
    cpp) language="cpp" ;;
    *) echo "Formato de arquivo não suportado"; exit 1 ;;
esac

# Executar os testes
run_tests "$tests_folder" "$input_file" "$language"
